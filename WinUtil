LOCALE_ID_US := 0x4090409
LOCALE_ID_RU := 0x4190419

switchLanguageEnglish()
{
	ControlGetFocus,ctl,A
	SendMessage,0x50,0, 67699721,%ctl%,A
}

switchLanguageRussian()
{
	ControlGetFocus,ctl,A 
	SendMessage,0x50,0, 68748313,%ctl%,A  
}	

; Returns thread owning specified window handle
; default = Active window
GetThreadOfWindow( hWnd=0 )
{
   IfEqual,hWnd,0
      hWnd:=WinExist("A")
   DllCall("GetWindowThreadProcessId", "uint",hWnd, "uintp",id)
   GetProcessThreadOrList(  id, threads )
   IfEqual,threads,
      return 0
   CB:=RegisterCallback("GetThreadOfWindowCallBack","Fast")
   lRet=0
   lParam:=hWnd
   loop,parse,threads,|
   {   NumPut( hWnd, lParam )
      DllCall("EnumThreadWindows", "uint",A_LoopField, "uint",CB, "uint",&lParam)
      if( NumGet( lParam )=true )
      {   lRet:=A_LoopField
         break
      }
   }
   DllCall("GlobalFree", "uint", CB)
   return lRet
}

GetProcessThreadOrList( processID, byRef list="" )
{
   ;THREADENTRY32 {
   THREADENTRY32_dwSize=0 ; DWORD
   THREADENTRY32_cntUsage = 4   ;DWORD
   THREADENTRY32_th32ThreadID = 8   ;DWORD
   THREADENTRY32_th32OwnerProcessID = 12   ;DWORD
   THREADENTRY32_tpBasePri = 16   ;LONG
   THREADENTRY32_tpDeltaPri = 20   ;LONG
   THREADENTRY32_dwFlags = 24   ;DWORD
   THREADENTRY32_SIZEOF = 28

   TH32CS_SNAPTHREAD=4

   hProcessSnap := DllCall("CreateToolhelp32Snapshot","uint",TH32CS_SNAPTHREAD, "uint",0)
   ifEqual,hProcessSnap,-1, return

   VarSetCapacity( thE, THREADENTRY32_SIZEOF, 0 )
   NumPut( THREADENTRY32_SIZEOF, thE )

   ret=-1

   if( DllCall("Thread32First","uint",hProcessSnap, "uint",&thE ))
      loop
      {
         if( NumGet( thE ) >= THREADENTRY32_th32OwnerProcessID + 4)
            if( NumGet( thE, THREADENTRY32_th32OwnerProcessID ) = processID )
            {   th := NumGet( thE, THREADENTRY32_th32ThreadID )
               IfEqual,ret,-1
                  ret:=th
               list .=  th "|"
            }
         NumPut( THREADENTRY32_SIZEOF, thE )
         if( DllCall("Thread32Next","uint",hProcessSnap, "uint",&thE )=0)
            break
      }

   DllCall("CloseHandle","uint",hProcessSnap)
   StringTrimRight,list,list,1
   return ret
}

getCurrentLocaleName()
{
	HKL:=DllCall("GetKeyboardLayout", "uint",GetThreadOfWindow(), "uint")
	LOCALE_SENGLANGUAGE=0x1001
    LOCALE_SENGCOUNTRY=0x1002
    VarSetCapacity( sKbd, 260, 0 )
	DllCall("GetLocaleInfo","uint",HKL>>16,"uint",LOCALE_SENGLANGUAGE, "str",sKbd, "uint",260)
	return sKbd
}

displayLocale()
{
	greenOSD(getCurrentLocaleName())
}


~LAlt & ~LShift::switchLanguage(1)
~LAlt & ~LShift up::switchLanguage(2)

switchLanguage( iKeyDownUp=0 )
{
	global LOCALE_ID_US
   static tickLast
   IfEqual,iKeyDownUp,1
   	{   
		tickLast=%A_TickCount%
      return
   }
   IfEqual,iKeyDownUp,2
      If( A_TickCount-tickLast>200 )
         return

  	WinGet, WinID,, A
  	ThreadID:=DllCall("GetWindowThreadProcessId", UInt, WinID, UInt, 0)
  	InputLocaleID:=DllCall("GetKeyboardLayout", UInt, ThreadID, UInt)

	if (InputLocaleID = LOCALE_ID_US)
	{
		switchLanguageRussian()
      }
	else
	{
		switchLanguageEnglish()
   }

	displayLocale()
}

; Display Green OSD
; Tooltip will be displayed for Timeout/1000 seconds.
; AT 04.03.2007
greenOSD(Text, size = 64, left = 0, top = 20, TimeOut=2000)
{
   	Gui, Destroy ;Experimental: for updating text

	CustomColor = EEAA99
	Gui, +AlwaysOnTop +LastFound +Owner  ; +Owner prevents a taskbar button from appearing.
	Gui, Color, %CustomColor%
	Gui, Font, s%size%
	Gui, Add, Text, cLime, %Text%
	; Make all pixels of this color transparent and make the text itself translucent (150):
	WinSet, TransColor, %CustomColor% 150
	Gui, -Caption  ; Remove the title bar and window borders.
	GuiControl,, MyText, %Text%
	Gui, Show, NA x%left% y%top%

    SetTimer, removeGreenOSD, %TimeOut%
    Return
}
removeGreenOSD:
   Gui, Destroy
Return
